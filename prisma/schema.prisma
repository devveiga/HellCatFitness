generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Instrutor {
  id     Int     @id @default(autoincrement())
  nome   String
  email           String       @db.VarChar(100) @unique()
}

model Treino {
  id            Int             @id @default(autoincrement())
  descricao     String
  dataInicio    DateTime
  ativo         Boolean         @default(true)
  exercicios    TreinoExercicio[]
  propostas     Proposta[]
  admin          Admin?       @relation(fields: [adminId], references: [id])
  adminId        String?      @db.VarChar(36) 
  usuario       Usuario?        @relation(fields: [usuarioId], references: [id])
  usuarioId     String?        @db.VarChar(36)
}


model Exercicio {
  id             Int       @id @default(autoincrement())
  nome           String
  grupoMuscular  String
  descricao      String?
  treinos        TreinoExercicio[]
}

model TreinoExercicio {
  id            Int       @id @default(autoincrement())


  treino        Treino    @relation(fields: [treinoId], references: [id])
  treinoId      Int
  exercicio     Exercicio @relation(fields: [exercicioId], references: [id])
  exercicioId   Int
  series        Int
  repeticoes    Int
  carga         Float?
}

model Usuario {
  id              String       @db.VarChar(36) @id @default(uuid())
  nome            String       @db.VarChar(50)
  email           String       @db.VarChar(100) @unique()
  senha           String       @db.VarChar(60)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  logs            Log[]
  propostas       Proposta[]   
  perguntaSecreta String?      @db.VarChar(100)
  respostaSecreta String?      @db.VarChar(200)
  treinos         Treino[]     
  @@map("usuarios")
}

model Log {
  id            Int         @id @default(autoincrement())
  usuario       Usuario?     @relation(fields: [usuarioId], references: [id])
  usuarioId     String?      @db.VarChar(36)
  descricao     String      @db.VarChar(60)
  complemento   String      @db.VarChar(200)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  admin         Admin?       @relation(fields: [adminId], references: [id])
  adminId       String?      @db.VarChar(36)
  @@map("logs")
}
model Proposta {
  id          Int       @id @default(autoincrement())

  usuario     Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId   String    @db.VarChar(36)

  treino      Treino    @relation(fields: [treinoId], references: [id])
  treinoId    Int
  descricao   String    @db.VarChar(255)
  resposta    String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?    @db.VarChar(36)

  @@map("propostas")
}

model Admin {
  id            String   @db.VarChar(36) @id @default(uuid())
  nome          String   @db.VarChar(60)
  email         String   @unique @db.VarChar(40)
  senha         String   @db.VarChar(60)   // senha deve ser varchar(60)
  nivel         Int      @db.SmallInt @default(2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt  
  treinos        Treino[]
  propostas     Proposta[]
  logs          Log[]
  @@map("admins")
}




